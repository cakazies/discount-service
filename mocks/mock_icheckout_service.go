// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/icheckout_service.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	request "discount-service/resources/request"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICheckoutService is a mock of ICheckoutService interface.
type MockICheckoutService struct {
	ctrl     *gomock.Controller
	recorder *MockICheckoutServiceMockRecorder
}

// MockICheckoutServiceMockRecorder is the mock recorder for MockICheckoutService.
type MockICheckoutServiceMockRecorder struct {
	mock *MockICheckoutService
}

// NewMockICheckoutService creates a new mock instance.
func NewMockICheckoutService(ctrl *gomock.Controller) *MockICheckoutService {
	mock := &MockICheckoutService{ctrl: ctrl}
	mock.recorder = &MockICheckoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICheckoutService) EXPECT() *MockICheckoutServiceMockRecorder {
	return m.recorder
}

// ServiceCheckoutOrder mocks base method.
func (m *MockICheckoutService) ServiceCheckoutOrder(ctx context.Context, req request.ReqCheckout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCheckoutOrder", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCheckoutOrder indicates an expected call of ServiceCheckoutOrder.
func (mr *MockICheckoutServiceMockRecorder) ServiceCheckoutOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCheckoutOrder", reflect.TypeOf((*MockICheckoutService)(nil).ServiceCheckoutOrder), ctx, req)
}
